{
    "openapi": "3.1.0",
    "info": {
        "title": "NVIDIA NIM API for Evo2",
        "description": "The NVIDIA NIM REST API. Please see https://docs.nvidia.com/nim/api-reference for more details.",
        "termsOfService": "https://nvidia.com/legal/terms-of-use",
        "contact": {
            "name": "NVIDIA Support",
            "url": "https://help.nvidia.com/"
        },
        "license": {
            "name": "Apache License Version 2.0",
            "url": "https://github.com/Zymrael/vortex/blob/b8bf0e53711a6dbf57c9351fe9fdc461e1399028/LICENSE"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://health.api.nvidia.com/v1/"
        }
    ],
    "paths": {
        "/biology/arc/evo2/embeddings": {
            "post": {
                "summary": "Generate embeddings for DNA sequence",
                "operationId": "embeddings_biology_arc_evo2_embeddings_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmbeddingsInputs"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmbeddingsOutputs"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "x-nvai-meta": {
                    "name": "Generate embeddings for DNA sequence",
                    "returns": "Embeddings for the input DNA sequence at a specific layer.",
                    "path": "embeddings",
                    "templates": [
                        {
                            "title": "Synchronous requests",
                            "requestEjs": {
                                "curl": "#!/usr/bin/env bash\nset -e\n\nif [ \"$NVCF_RUN_KEY\" = \"\" ]; then read -p \"Paste Run Key: \" NVCF_RUN_KEY; fi\nURL=${URL:-https://health.api.nvidia.com/v1/biology/arc/evo2/embeddings}\n\nrequest='{\n \"sequence\": \"ATCG\",\n \"layer_index\": 1\n}'\ncurl -H 'Content-Type: application/json' \\\n     -H \"Authorization: Bearer $NVCF_RUN_KEY\" \\\n     -H \"nvcf-poll-seconds: 300\" \\\n     -d \"$request\" \"$URL\"\n",
                                "python": "#!/usr/bin/env python3\nimport requests\nimport os\nimport json\nfrom pathlib import Path\nfrom base64 import decodebytes\n\nkey = os.getenv(\"NVCF_RUN_KEY\") or input(\"Paste the Run Key: \")\n\nr = requests.post(\n    url=os.getenv(\"URL\", \"https://health.api.nvidia.com/v1/biology/arc/evo2/embeddings\"),\n    headers={\"Authorization\": f\"Bearer {key}\"},\n    json={\n        \"sequence\": \"ATCG\",\n        \"layer_index\": 1,\n    },\n)\nprint(r, \"Saving to embeddings.npz:\\n\", r.text[:200], \"...\")\nPath(\"embeddings.npz\").write_bytes(decodebytes(json.loads(r.text)[\"embeddings\"].encode(\"ascii\")))\n"
                            }
                        }
                    ]
                },
                "description": "Generate embeddings for DNA sequence"
            }
        },
        "/biology/arc/evo2/generate": {
            "post": {
                "summary": "Generate DNA sequences",
                "operationId": "generate_biology_arc_evo2_generate_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GenerateInputs"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenerateOutputs"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "x-nvai-meta": {
                    "name": "Generate DNA sequences",
                    "returns": "Generated DNA sequence based on the input parameters.",
                    "path": "generate",
                    "templates": [
                        {
                            "title": "Synchronous requests",
                            "requestEjs": {
                                "curl": "#!/usr/bin/env bash\nset -e\n\nif [ \"$NVCF_RUN_KEY\" = \"\" ]; then read -p \"Paste Run Key: \" NVCF_RUN_KEY; fi\nURL=${URL:-https://health.api.nvidia.com/v1/biology/arc/evo2/generate}\n\nrequest='{\n \"sequence\": \"ACTGACTGACTGACTG\",\n \"num_tokens\": 8,\n \"top_k\": 1,\n \"enable_sampled_probs\": true\n}'\ncurl -H 'Content-Type: application/json' \\\n     -H \"Authorization: Bearer $NVCF_RUN_KEY\" \\\n     -H \"nvcf-poll-seconds: 300\" \\\n     -d \"$request\" \"$URL\"\n",
                                "python": "#!/usr/bin/env python3\nimport requests\nimport os\nimport json\nfrom pathlib import Path\n\nkey = os.getenv(\"NVCF_RUN_KEY\") or input(\"Paste the Run Key: \")\n\nr = requests.post(\n    url=os.getenv(\"URL\", \"https://health.api.nvidia.com/v1/biology/arc/evo2/generate\"),\n    headers={\"Authorization\": f\"Bearer {key}\"},\n    json={\n        \"sequence\": \"ACTGACTGACTGACTG\",\n        \"num_tokens\": 8,\n        \"top_k\": 1,\n        \"enable_sampled_probs\": True,\n    },\n)\nprint(r, \"Saving to output.fa:\\n\", r.text[:200], \"...\")\nPath(\"output.fa\").write_text(json.loads(r.text)[\"sequence\"])\n"
                            }
                        }
                    ]
                },
                "description": "Generate DNA sequences"
            }
        },
        "/v1/health/live": {
            "get": {
                "summary": "Health Live",
                "description": "Handler for liveness endpoint.",
                "operationId": "health_live_v1_health_live_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/v1/health/ready": {
            "get": {
                "summary": "Health Ready",
                "description": "Handler for readiness endpoint.",
                "operationId": "health_ready_v1_health_ready_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/v1/metrics": {
            "get": {
                "summary": "Metrics",
                "description": "Handler for metrics endpoint.",
                "operationId": "metrics_v1_metrics_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "title": "Response Metrics V1 Metrics Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/license": {
            "get": {
                "summary": "License",
                "description": "Handler for license endpoint.",
                "operationId": "license_v1_license_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseEndpointModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/metadata": {
            "get": {
                "summary": "Metadata",
                "description": "Handler for metadata endpoint.",
                "operationId": "metadata_v1_metadata_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetadataEndpointModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/manifest": {
            "get": {
                "summary": "Manifest",
                "description": "Handler for the manifest endpoint.",
                "operationId": "manifest_v1_manifest_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManifestEndpointModel"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "EmbeddingsInputs": {
                "properties": {
                    "sequence": {
                        "type": "string",
                        "maxLength": 8192,
                        "minLength": 1,
                        "title": "Input DNA sequence",
                        "description": "A string containing DNA sequence data."
                    },
                    "layer_index": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Layer Index",
                        "description": "The index of the layer from which to extract embeddings. If set to 1, embeddings will be extracted from the first layer. If None, embeddings will be extracted from the last layer.",
                        "default": 1
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "sequence"
                ],
                "title": "EmbeddingsInputs"
            },
            "EmbeddingsOutputs": {
                "properties": {
                    "embeddings": {
                        "type": "string",
                        "format": "base64",
                        "title": "Embeddings",
                        "description": "Output Embeddings in NumPy Zipped (NPZ) format, base64 encoded."
                    },
                    "elapsed_ms": {
                        "type": "integer",
                        "title": "Elapsed milliseconds on server side",
                        "description": "Elapsed milliseconds on server side"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "embeddings",
                    "elapsed_ms"
                ],
                "title": "EmbeddingsOutputs"
            },
            "GenerateInputs": {
                "properties": {
                    "sequence": {
                        "type": "string",
                        "maxLength": 8192,
                        "minLength": 1,
                        "title": "Input DNA Sequence",
                        "description": "A string containing DNA sequence data."
                    },
                    "num_tokens": {
                        "anyOf": [
                            {
                                "type": "integer",
                                "maximum": 8192.0,
                                "minimum": 1.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Number of tokens to generate",
                        "description": "An integer that controls number of tokens that will be generated.",
                        "default": 4
                    },
                    "temperature": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Temperature",
                        "description": "A float that controls the randomness of the sampling process. Values lower than 1.0 make the distribution sharper (more deterministic), while values higher than 1.0 make it more uniform (more random).",
                        "default": 1.0
                    },
                    "top_k": {
                        "anyOf": [
                            {
                                "type": "integer",
                                "maximum": 20.0,
                                "minimum": 0.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Top K",
                        "description": "An integer that specifies the number of highest probability tokens to consider. When set to 1, it performs greedy decoding by selecting the token with the highest probability. Higher values allow for more diverse sampling. If set to 0, all tokens are considered.",
                        "default": 4
                    },
                    "top_p": {
                        "anyOf": [
                            {
                                "type": "number",
                                "maximum": 1.0,
                                "minimum": 0.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Top P",
                        "description": "A float between 0 and 1 that enables nucleus sampling. It filters the smallest set of tokens whose cumulative probability exceeds the top_p threshold. Setting this to 0.0 disables top-p sampling.",
                        "default": 1.0
                    },
                    "enable_logits": {
                        "type": "boolean",
                        "title": "Enable Logits Reporting",
                        "description": "A boolean that if set, enables logits reporting in the output response.",
                        "default": false
                    },
                    "enable_sampled_probs": {
                        "type": "boolean",
                        "title": "Enable Sampled Token Probabilities Reporting",
                        "description": "A boolean flag that, when set to True, enables the reporting of sampled token probabilities. When enabled, this feature generates a list of probability values (ranging from 0 to 1) corresponding to each token in the output sequence. These probabilities represent the model's confidence in selecting each token during the generation process. The resulting list has the same length as the output sequence, providing insight into the model's decision-making at each step of text generation.",
                        "default": false
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "sequence"
                ],
                "title": "GenerateInputs"
            },
            "GenerateOutputs": {
                "properties": {
                    "sequence": {
                        "type": "string",
                        "title": "DNA sequence",
                        "description": "Output DNA sequence."
                    },
                    "logits": {
                        "anyOf": [
                            {
                                "items": {
                                    "items": {
                                        "type": "number"
                                    },
                                    "type": "array"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Logits",
                        "description": "Output Logits in [num_tokens,512] shape (if requested via enable_logits flag.)"
                    },
                    "sampled_probs": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "number"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sampled Token Probabilities",
                        "description": "A list of probabilities corresponding to each token in the generated output sequence. Each value ranges from 0 to 1, representing the model's confidence in selecting that specific token during the generation process. The list length matches the output sequence length. To use this feature, set `enable_sampled_probs` to True. This information provides insight into the model's decision-making at each step of text generation."
                    },
                    "elapsed_ms": {
                        "type": "integer",
                        "title": "Elapsed milliseconds",
                        "description": "Elapsed milliseconds on server side"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "sequence",
                    "elapsed_ms"
                ],
                "title": "GenerateOutputs"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "LicenseEndpointModel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the license for the NIM container."
                    },
                    "path": {
                        "type": "string",
                        "title": "Path",
                        "description": "The filepath within the container containing the license content."
                    },
                    "sha": {
                        "type": "string",
                        "title": "Sha",
                        "description": "A SHA1 hash of the license contents."
                    },
                    "size": {
                        "type": "integer",
                        "title": "Size",
                        "description": "The number of characters in the license content."
                    },
                    "url": {
                        "type": "string",
                        "title": "Url",
                        "description": "The url where this license is hosted externally."
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "file"
                        ],
                        "const": "file",
                        "title": "Type",
                        "description": "The format of the license content."
                    },
                    "content": {
                        "type": "string",
                        "title": "Content",
                        "description": "The license text."
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "path",
                    "sha",
                    "size",
                    "url",
                    "type",
                    "content"
                ],
                "title": "LicenseEndpointModel",
                "description": "A model representing the license response."
            },
            "ManifestEndpointModel": {
                "properties": {
                    "manifest_file": {
                        "type": "string",
                        "title": "Manifest File",
                        "description": "The content of the manifest file describing the required model artifacts."
                    },
                    "repository_override": {
                        "type": "string",
                        "title": "Repository Override",
                        "description": "Alternate location used to retrieve artifacts from manifest file."
                    }
                },
                "type": "object",
                "required": [
                    "manifest_file",
                    "repository_override"
                ],
                "title": "ManifestEndpointModel",
                "description": "A model representing the manifest response."
            },
            "MetadataEndpointModel": {
                "properties": {
                    "assetInfo": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Assetinfo",
                        "description": "A list of required container assets excluding model artifacts"
                    },
                    "licenseInfo": {
                        "$ref": "#/components/schemas/LicenseEndpointModel",
                        "description": "The license info."
                    },
                    "modelInfo": {
                        "items": {
                            "$ref": "#/components/schemas/ModelInfo"
                        },
                        "type": "array",
                        "title": "Modelinfo",
                        "description": "A list of models being served by the NIM."
                    },
                    "repository_override": {
                        "type": "string",
                        "title": "Repository Override",
                        "description": "Alternate location used to retrieve artifacts from manifest file."
                    },
                    "version": {
                        "type": "string",
                        "title": "Version",
                        "description": "The version of the NIM service."
                    }
                },
                "type": "object",
                "required": [
                    "assetInfo",
                    "licenseInfo",
                    "modelInfo",
                    "repository_override",
                    "version"
                ],
                "title": "MetadataEndpointModel",
                "description": "A model representing the metadata response."
            },
            "ModelInfo": {
                "properties": {
                    "modelUrl": {
                        "type": "string",
                        "title": "Modelurl"
                    },
                    "shortName": {
                        "type": "string",
                        "title": "Shortname"
                    }
                },
                "type": "object",
                "required": [
                    "modelUrl",
                    "shortName"
                ],
                "title": "ModelInfo",
                "description": "A model representing the model response."
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        }
    }
}
